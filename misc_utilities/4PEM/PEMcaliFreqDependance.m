function p = PEMcaliFreqDependance(f,A,I,t,DCoffset)
% Simple harmonic demodulation of a 4PEM waveform. No window function is
% applied and J0(A1) = J0(A4) = 0 is assmed;
I = BlackmanNuttall(length(I)).'.*I + DCoffset;
% The basis below is all not super tiny members of X1X2X3X4. Some of these
% will likely have frequencies above the Nyquist limit, but that should be OK
basis =...  
[ 1  1  1  1 ;...
 -1  1  1  1 ;...
  1 -1  1  1 ;...
  1  1 -1  1 ;...
  1  1  1 -1 ;...
  1  1 -1 -1 ;...
 -1  1 -1  1 ;...
 -1  1  1 -1 ;...
  3  1  1  3 ;...
 -3  1  1  3 ;...
  3 -1  1  3 ;...
  3  1 -1  3 ;...
  3  1  1 -3 ;...
  3  1 -1 -3 ;...
 -3  1 -1  3 ;...
 -3  1  1 -3 ;...
  3  1  1  1 ;...
 -3  1  1  1 ;...
  3 -1  1  1 ;...
  3  1 -1  1 ;...
  3  1  1 -1 ;...
  3  1 -1 -1 ;...
 -3  1 -1  1 ;...
 -3  1  1 -1 ;...
  1  1  1  3 ;...
 -1  1  1  3 ;...
  1 -1  1  3 ;...
  1  1 -1  3 ;...
  1  1  1 -3 ;...
  1  1 -1 -3 ;...
 -1  1 -1  3 ;...
 -1  1  1 -3 ];
bessel = ones(size(basis));
for i = 1:size(basis,1)  % get the bessel coef.
    for j=1:4
        if basis(i,j) ~= 9; bessel(i,j) = besselj(abs(basis(i,j)),A(j)); end
    end
end
bessel = prod(bessel,2); 
freq = abs(basis*f.'); % compute frequencies of the harmonics.
C = exp(1i*2*pi*freq*t.')*I; % compute the 15 harmonic amplitudes
[~,mag] = cart2pol(real(C),imag(C)); % convert them to polar form
mags = mag./bessel./0.3635819; % divide out Fourier coef. and apply correct sign
[freq,Idx] = sort(freq);
mags = mags(Idx);
bessel = bessel(Idx);
p0 = mags(1).*[1, -3.4567E-7, -6.4578E-12, 1.0032E-17];
p=lsqcurvefit(@(p,freq) p(1)+p(2)*(freq)+p(3)*(freq.^2)+p(4)*(freq.^3),p0,freq,mags);
figure
h=axes;
hold on;
plot(h,freq./1000,mags./p(1),'o');
xax = h.XLim*1000;
p = p./p(1);
freq2 = linspace(xax(1),xax(2),1000);
line = p(1)+p(2)*freq2+p(3)*(freq2.^2)+p(4)*(freq2.^3);
plot(h,freq2./1000,line);
h.XLabel.String = 'Frequency (KHz)';
h.YLabel.String = 'Attenuation Factor';
h.Title.String = 'Normalized Gain of amplifier';

end